from datetime import datetime
from config import TOKEN
from google_sheet import GoogleSheets
from telebot import types, TeleBot
from telebot.types import CallbackQuery, ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
import telebot_calendar
from keyboards import create_markup_menu
from clear_dict import *

bot = TeleBot(TOKEN)

client_phone_number = {467168798: '+79522600066', 288041146: '+79215528067'}  # sql —Å–¥–µ–ª–∞—Ç—å


def get_client_id(client_id, client_username):
    """–°–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ id, username, phone"""
    id_client = f"id: {str(client_id)}\n@{str(client_username)}\n"
    if client_phone_number.get(client_id, None) is not None:
        if client_phone_number[client_id] != '':
            id_client += 'tel: ' + client_phone_number[client_id]
        else:
            id_client += 'tel: None'
    return id_client


def create_client(chat_id):
    """–°–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç GoogleSheet –ø–æ chat_id"""
    client = GoogleSheets(chat_id)
    client_dict[chat_id] = client
    timer_dict[chat_id] = datetime.now()
    return client


@bot.message_handler(commands=['start'])
def check_phone_number(message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ–¥–∏–Ω–æ–∂–¥—ã"""
    clear_all_dict(message.chat.id)

    if client_phone_number.get(message.chat.id, None) is None:
        markup = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        button_phone = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω üìû",
                                            request_contact=True)
        markup.add(button_phone)
        bot.send_message(message.chat.id, '–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.',
                         reply_markup=markup)

        @bot.message_handler(content_types=['contact'])
        def contact(message_contact):
            """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—ä–µ–∫—Ç <contact> -> –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é"""
            if message_contact.contact is not None:
                client_phone_number[message.chat.id] = message_contact.contact.phone_number
                bot.send_message(message.chat.id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!', reply_markup=ReplyKeyboardRemove())
                menu(message)
    else:
        menu(message)


@bot.message_handler(content_types=['text'])
def any_word_before_number(message_any):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    bot.send_message(message_any.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\n'
                                          '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–Ω–æ–ø–∫–∞–º–∏.')


@bot.message_handler(func=lambda message: message.text == 'MENU')
def menu(message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=create_markup_menu())


@bot.callback_query_handler(lambda call: call.data == 'CANCEL_RECORD')
def cancel_record(call):
    """
    InlineKeyboardMarkup - –í—ã–±–æ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã
    """
    client = create_client(call.message.chat.id)
    client_id = get_client_id(call.message.chat.id, call.from_user.username)
    records = client.get_record(client_id)
    if len(records) != 0:
        client.lst_records = records
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            *[InlineKeyboardButton(text=' - '.join(x[:3]), callback_data=f'CANCEL {ind}') for ind, x in
              enumerate(records)])
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text='–ö–∞–∫—É—é –∑–∞–ø–∏—Å—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å?üôà',
                              reply_markup=markup
                              )
    else:
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text='–û—Ç–º–µ–Ω—è—Ç—å –ø–æ–∫–∞ –Ω–µ—á–µ–≥–æ ü§∑'
                              )
        check_phone_number(call.message)


@bot.callback_query_handler(lambda call: call.data.startswith('CANCEL'))
def approve_cancel(call):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ inline callback –∑–∞–ø—Ä–æ—Å–æ–≤
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
    """
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(*[InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', callback_data='APPROVE' + call.data),
                 InlineKeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='APPROVE_MENU')])
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text='–¢–æ—á–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å?',
                          reply_markup=markup)


@bot.callback_query_handler(lambda call: call.data.startswith('APPROVE'))
def set_cancel(call):
    """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ inline callback –∑–∞–ø—Ä–æ—Å–æ–≤
        –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏
    """
    if 'MENU' not in call.data:
        client = client_dict.get(call.from_user.id)
        if client:
            client_info = client.lst_records[int(call.data.split()[1])]
            client.date_record, client.time_record, client.name_service, client.name_master = client_info
            client_id = get_client_id(call.message.chat.id, call.from_user.username)
            if client.set_time('', client_id):
                bot.edit_message_text(chat_id=call.message.chat.id,
                                      message_id=call.message.message_id,
                                      text='–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞!')
            else:
                bot.edit_message_text(chat_id=call.message.chat.id,
                                      message_id=call.message.message_id,
                                      text='–ù–µ —Å–º–æ–≥ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å.')
        else:
            bot.delete_message(chat_id=call.message.chat.id,
                               message_id=call.message.message_id)
    else:
        bot.delete_message(chat_id=call.message.chat.id,
                           message_id=call.message.message_id)

    check_phone_number(call.message)


@bot.callback_query_handler(lambda call: call.data == 'MY_RECORD')
def show_record(call):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    client = create_client(call.message.chat.id)

    client_id = get_client_id(call.message.chat.id, call.from_user.username)
    records = client.get_record(client_id)
    rec = ''
    if len(records) != 0:
        rec += '–ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–ø–∏—Å–∏:\n\n'
        for i in sorted(records, key=lambda x: (x[0], x[1], x[2])):
            rec += 'ü™∑' + ' - '.join(i) + '\n'
    else:
        rec = '–ê–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üîç'
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text=rec
                          )
    check_phone_number(call.message)


@bot.callback_query_handler(lambda call: call.data == 'RECORD')
def choice_service(call):
    """
    InlineKeyboardMarkup
    –í—ã–±–æ—Ä —É—Å–ª—É–≥–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏
    """
    client = create_client(call.message.chat.id)

    all_serv = client.get_services()
    client.dct_master_service = all_serv
    markup = InlineKeyboardMarkup(row_width=3)
    markup.add(*[InlineKeyboardButton(text=x, callback_data='SERVICE' + x) for x in all_serv.keys()])
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text="–í—ã–±–µ—Ä–∏ —É—Å–ª—É–≥—É:",
                          reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('SERVICE'))
def choice_master(call):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ inline callback –∑–∞–ø—Ä–æ—Å–æ–≤
    –í—ã–±–æ—Ä –º–∞—Å—Ç–µ—Ä–∞
    """
    client = client_dict.get(call.from_user.id)
    if client:
        name_ser = client.name_service = call.data.lstrip('SERVICE')
        dct = client.dct_master_service
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(*[InlineKeyboardButton(text=x, callback_data='MASTER' + x) for x in dct[name_ser]])
        markup.add(InlineKeyboardButton(text='–õ—é–±–æ–π –º–∞—Å—Ç–µ—Ä', callback_data='MASTER' + '–õ–Æ–ë–û–ô'))

        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text="–í—ã–±–µ—Ä–∏ –ú–∞—Å—Ç–µ—Ä–∞:",
                              reply_markup=markup)
    else:
        bot.delete_message(chat_id=call.message.chat.id,
                           message_id=call.message.message_id)
        check_phone_number(call.message)


@bot.callback_query_handler(func=lambda call: call.data.startswith('MASTER'))
def choice_date(call):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ inline callback –∑–∞–ø—Ä–æ—Å–æ–≤
    –í—ã–±–æ—Ä –¥–∞—Ç—ã
    """
    client = client_dict.get(call.from_user.id)
    if client:
        if call.data.lstrip('MASTER') != '–õ–Æ–ë–û–ô':
            client.name_master = call.data.lstrip('MASTER')
        lst = client.get_all_days()
        lst = list(map(lambda x: datetime.strptime(x, '%d.%m.%y').date(), lst))
        client.lst_currant_date = lst
        calendar_dict[call.message.chat.id] = str(call.message.chat.id)
        bot.edit_message_text(chat_id=call.from_user.id,
                              message_id=call.message.message_id,
                              text='–í—ã–±–µ—Ä–∏ –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∞—Ç—É:\n ‚úÖ - –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è',
                              reply_markup=telebot_calendar.create_calendar(
                                  name='CALENDAR' + calendar_dict[call.message.chat.id], lst_current_date=lst)
                              )
    else:
        bot.delete_message(chat_id=call.message.chat.id,
                           message_id=call.message.message_id)
        check_phone_number(call.message)


@bot.callback_query_handler(func=lambda call: call.data.startswith('CALENDAR'))
def choice_time(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ inline callback –∑–∞–ø—Ä–æ—Å–æ–≤
    –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
    """
    client = client_dict.get(call.from_user.id)
    if client:
        lst = client.lst_currant_date
        # At this point, we are sure that this calendar is ours. So we cut the line by the separator of our calendar
        name, action, year, month, day = call.data.split(':')
        # Processing the calendar. Get either the date or None if the buttons are of a different type
        telebot_calendar.calendar_query_handler(
            bot=bot, call=call, name=name, action=action, year=year, month=month, day=day,
            lst_currant_date=lst
        )

        if action == "DAY":
            client.date_record = datetime(int(year), int(month), int(day)).strftime('%d.%m.%y')
            lst_times = client.get_free_time()
            client.dct_currant_time = lst_times

            markup = InlineKeyboardMarkup(row_width=4)
            markup.add(*[InlineKeyboardButton(text=x, callback_data='TIME' + x) for x in lst_times])

            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            bot.send_message(
                chat_id=call.from_user.id,
                text="–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è:",
                reply_markup=markup
            )

        elif action == "CANCEL":
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            # print(f"{calendar_dict[call.message.chat.id]}: –û—Ç–º–µ–Ω–∞")
            check_phone_number(call.message)
    else:
        bot.delete_message(chat_id=call.message.chat.id,
                           message_id=call.message.message_id)
        check_phone_number(call.message)


@bot.callback_query_handler(func=lambda call: call.data.startswith('TIME'))
def set_time(call):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ inline callback –∑–∞–ø—Ä–æ—Å–æ–≤
    –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
    """
    client = client_dict.get(call.from_user.id)
    if client:
        client.time_record = call.data.lstrip('TIME')
        id_client = get_client_id(call.message.chat.id, call.from_user.username)
        if client.set_time(id_client):
            bot.edit_message_text(chat_id=call.from_user.id,
                                  message_id=call.message.message_id,
                                  text=f'–£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª –≤–∞—Å!\n\n'
                                       f'‚Ä¢ –£—Å–ª—É–≥–∞: {client.name_service}\n'
                                       f'‚Ä¢ –ú–∞—Å—Ç–µ—Ä: {client.name_master}\n'
                                       f'‚Ä¢ –î–∞—Ç–∞: {client.date_record}\n'
                                       f'‚Ä¢ –í—Ä–µ–º—è: {client.time_record}',
                                  )
            check_phone_number(call.message)
        else:
            bot.send_message(call.message.chat.id, '–í—Ä–µ–º—è –∫—Ç–æ-—Ç–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª...\n–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ!')
    else:
        bot.delete_message(chat_id=call.message.chat.id,
                           message_id=call.message.message_id)
        check_phone_number(call.message)


bot.infinity_polling()
